package tp03.ejercicio1;

import tp02.ejercicio2.ListaGenerica;
import tp02.ejercicio3.ColaGenerica;
import tp02.ejercicio2.ListaEnlazadaGenerica;

public class ArbolBinario<T> {
	private cant = 0;
	private T dato;
	private ArbolBinario<T> hijoIzquierdo;   
	private ArbolBinario<T> hijoDerecho; 

	
	public ArbolBinario() {
		super();
	}

	public ArbolBinario(T dato) {
		this.dato = dato;
	}

	/*
	 * getters y setters
	 * 
	 */
	public T getDato() {
		return dato;
	}

	public void setDato(T dato) {
		this.dato = dato;
	}
	
	/**
	 * Preguntar antes de invocar si tieneHijoIzquierdo()
	 * @return
	 */
	public ArbolBinario<T> getHijoIzquierdo() {
		return this.hijoIzquierdo;
	}

	public ArbolBinario<T> getHijoDerecho() {
		return this.hijoDerecho;

	}

	public void agregarHijoIzquierdo(ArbolBinario<T> hijo) {
		this.hijoIzquierdo = hijo;
	}

	public void agregarHijoDerecho(ArbolBinario<T> hijo) {
		this.hijoDerecho = hijo;
	}

	public void eliminarHijoIzquierdo() {
		this.hijoIzquierdo = null;
	}

	public void eliminarHijoDerecho() {
		this.hijoDerecho = null;
	}

	public boolean esVacio() {
		return this.getDato() == null && !this.tieneHijoIzquierdo() && !this.tieneHijoDerecho();
	}

	public boolean esHoja() {
		return (!this.tieneHijoIzquierdo() && !this.tieneHijoDerecho());

	}

	@Override
	public String toString() {
		return this.getDato().toString();
	}

	 
	public boolean tieneHijoIzquierdo() {
		return this.hijoIzquierdo!=null;
	}

	 
	public boolean tieneHijoDerecho() {
		return this.hijoDerecho!=null;
	}

	public int contarHojas() {
		if(this.esHoja()) {
			return 1;
		}
		else {
			if(this.tieneHijoIzquierdo()) {
				this.cant += this.getHijoIzquierdo().contarHojas();
			}
			else if (this.tieneHijoDerecho()) {
				this.cant += this.getHijoDerecho().contarHojas();
			}
		}
		return this.cant;
	}
	

    public ArbolBinario<T> espejo() {
    	if(this.esVacio()) {
    		return null;
    	}
    	else {
    		ArbolBinario<T> nuevoArbol = new ArbolBinario<>(this.getDato());
    		if(this.tieneHijoIzquierdo()) {
    			nuevoArbol.agregarHijoIzquierdo(this.getHijoDerecho().espejo());
    		}
    		else if(this.tieneHijoDerecho()) {
    			nuevoArbol.agregarHijoDerecho(this.getHijoIzquierdo().espejo());
    		}
    		return nuevoArbol;
    	}
	}


	public void entreNiveles(int n, int m){
		int nivel = 0;
		ListaGenerica<T> listaPorNiveles = new ListaEnlazadaGenerica<T>();
		ListaGenerica<ListaGenerica<T>> listaFinal = new ListaEnlazadaGenerica<ListaGenerica<T>>();
		ColaGenerica<ArbolBinario<T>> cola = new ColaGenerica<ArbolBinario<T>>();
		ArbolBinario<T> arbol = null;
		cola.encolar(this);
		cola.encolar(null);
		boolean termino = false;
		while((!cola.esVacia()) & (!termino)) {
			arbol = cola.desencolar();
			if(arbol != null) {
				if((nivel >= n) & (nivel <= m)) {
					listaPorNiveles.agregarFinal(arbol.getDato());
					if(arbol.tieneHijoIzquierdo()) {
						listaPorNiveles.agregarFinal(arbol.getHijoIzquierdo().getDato());
					}
					if(arbol.tieneHijoDerecho()) {
						listaPorNiveles.agregarFinal(arbol.getHijoDerecho().getDato());
					}
				}
			}
				
				listaFinal.agregarFinal(listaPorNiveles);
				listaPorNiveles = new ListaEnlazadaGenerica<T>(); 
				nivel++;
			
				if(!cola.esVacia()){
					cola.encolar(null);
					if(nivel > m) {
						termino = true;
					}
				}
			}
		
		for(int i = 0; i < listaFinal.tamanio(); i++) {			
			System.out.println(listaFinal.elemento(i));
		}
		
	}
	
	public void enOrden() {
		if(!this.esVacio()) {
			if(this.tieneHijoIzquierdo()) {
				this.getHijoIzquierdo().enOrden();
			}
			System.out.println(this.getDato());
			if(this.tieneHijoDerecho()) {
				this.getHijoDerecho().enOrden();
			}
		}
	}
	
	
	

}
